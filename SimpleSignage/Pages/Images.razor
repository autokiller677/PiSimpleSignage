@page "/"

@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Infrastructure;
@using Microsoft.Data.SqlClient;
@using Microsoft.EntityFrameworkCore.Internal;
@using Microsoft.EntityFrameworkCore.Storage;
@using SimpleSignage.Data;
@inject IDbContextFactory<signageContext> DbFactory;

<h1>Manage images</h1>

<table class="table">

    <thead>
        <tr>
            <th>
                Description
            </th>
            <th>
                Start on
            </th>
            <th>
                End on
            </th>
            <th>Devices</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var image in image_list)
        {
            @if (!image.Item1.MarkedForDelete)
            {
                <tr>
                    <td>
                        <img src="@image.Item1.Filename"  width="100px" />
                    </td>

                    <td>
                        @image.Item1.Description
                    </td>
                    <td>
                        @image.Item1.DateStart
                    </td>
                    <td>
                        @if (image.Item1.Infinite)
                        {
                            <p>run forever</p>
                        }
                        else
                        {
                            @image.Item1.DateEnd
                        }
                    </td>
                    <td>
                        @if (image.Item2.Count > 0)
                        {
                            foreach (var device in @image.Item2)
                            {
                                <p>@device.Name</p>
                            }
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => deleteImage(image.Item1)">Delete</button>
                    </td>
                </tr>
            }
        }
        <tr>
            <td>
                <button class="btn btn-primary" @onclick="AddImage">Add image</button>
			</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
		</tr>
    </tbody>
</table>

@if (AddImageDialogOpen)
{
    <AddImageDialog OnClose="@AddImageDialogClosing" /> 
}

@code 
{
    public List<Tuple<Image, List<Device>>> image_list { get; set; } = new List<Tuple<Image, List<Device>>>();

    private bool AddImageDialogOpen { get; set; }

    protected override void OnInitialized()
    {
        UpdateImageList();
    }

    private void UpdateImageList()
    {
        using var context = DbFactory.CreateDbContext();

        string sort_by = "IMAGES.ID";
        string order_by = "ASC";
        string querystring = "SELECT IMAGES.ID as Column1, IMAGES.DESCRIPTION as Column2, IMAGES.ENABLED as Column3, IMAGES.DATE_START as Column4, IMAGES.DATE_END as Column5, IMAGES.INFINITE as Column6, IMAGES.FILENAME as Column7, group_concat(DEVICES.NAME, ', ') as Column8 FROM IMAGES INNER JOIN IMAGES_TO_DEVICES ON IMAGES.ID = IMAGES_TO_DEVICES.IMAGE_ID INNER JOIN DEVICES ON IMAGES_TO_DEVICES.DEVICE_ID = DEVICES.ID group by IMAGES.ID UNION SELECT IMAGES.ID as Column1, IMAGES.DESCRIPTION as Column2, IMAGES.ENABLED as Column3, IMAGES.DATE_START as Column4, IMAGES.DATE_END as Column5, IMAGES.INFINITE as Column6, IMAGES.FILENAME as Column7, null as Column8 FROM IMAGES WHERE IMAGES.MARKED_FOR_DELETE = 0 AND NOT EXISTS (SELECT * FROM IMAGES_TO_DEVICES WHERE IMAGES.ID = IMAGES_TO_DEVICES.IMAGE_ID)";

        var res = context.Database.(querystring).ToList();

        foreach (var image in context.Images)
        {
            var query = from map in context.ImagesToDevices
                where map.ImageId == image.Id
                select map.DeviceId;
   
            var device_ids = query.ToList();

            List<Device> dev_list = new List<Device>();
            foreach (var dev_id in device_ids)
            {
                var query2 = from device in context.Devices
                        where device.Id == dev_id
                        select device;
                dev_list.Add(query2.FirstOrDefault());
            }

            image_list.Add(new Tuple<Image, List<Device>>(image, dev_list));

        }
    }


	private void deleteImage(Image img)
    {
        using var context = DbFactory.CreateDbContext();
        context.Images.Remove(img);
        context.SaveChanges();
        UpdateImageList();
    }

    private void AddImage()
    {
        AddImageDialogOpen = true;
    }

    private void AddImageDialogClosing()
    {
        AddImageDialogOpen = false;
        UpdateImageList();
    }

}